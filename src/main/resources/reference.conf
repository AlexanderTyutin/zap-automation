# Copyright 2019 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Below properties are used to configure Zap Api.
# To override any of the the default values, specify the required config in the test suite's .conf file.

zap-automation-config {

  # Conducts a ZAP active scan if set to true.
  activeScan = false

  # Fails test only if the reported alert's severity is above or same as the provided failureThreshold.
  # Example:
  # failureThreshold = "Medium" will not fail the test if the report has only Low and Informational alerts.
  # Test will fail if there are any Medium or High Alerts
  # Accepted Values: High, Medium, Low
  failureThreshold = "Low"

  # Required field. It will rarely need to be changed. We've included it as an overridable
  # field for flexibility and just in case.
  zapBaseUrl = "http://localhost:11000"

  # Required field. This is the seed url for the spider scan. It needs to be the URL of the start page of
  # your application (not just localhost:port).
  testUrl = ""

  # Not a required field. This url is added as the base url to your context.
  # A context is a construct in Zap that limits the scope of any attacks run to a
  # particular domain (this doesn't mean that Zap won't find alerts on other services during the
  # browser test run).
  # This would usually be the base url of your service - eg http://localhost:xxxx.*
  contextBaseUrlRegex = ".*"

  # Not a required field. This value, if set to true, will ignore all alerts from optimizely.
  ignoreOptimizelyAlerts = false

  # Not a required field. These are the urls that the zap-automation library
  # will use to filter out the alerts that are shown to you. Note that while Zap is doing
  # testing, it is likely to find alerts from other services that you don't own - for example
  # from logging in, therefore we recommend that you set this to be urls for the
  # service you are interested in.
  alertUrlsToReport = []

  # Not a required field. You should set this to be true if you are testing an API.
  # By default this assumes you are testing a UI and therefore is defaulted to be false.
  testingAnApi = false

  # Not a required field. You may set this if you have any routes that are part of your
  # application, but you do not want tested. For example, if you had any test-only routes, you
  # could force Zap not to test them by adding them in here as a regex.
  routeToBeIgnoredFromContext = ""

  # Not a required field. We recommend you don't change this field, as we've made basic choices
  # for the platform. We made it overridable just in case your service differs from the
  # standards of the Platform.
  #
  # The technologies that you put here will limit the amount of checks that ZAP will do to
  # just the technologies that are relevant. The default technologies are set to
  # "OS,OS.Linux,Language,Language.Xml,SCM,SCM.Git".
  desiredTechnologyNames = "OS,OS.Linux,Language,Language.Xml,SCM,SCM.Git"

  # If, when you run the Zap tests, you find alerts that you have investigated and don't see as a problem
  # you can filter them out by adding to this list, using the cweid and the url regex that the alert was found on.
  # The CWE ID is a Common Weakness Enumeration (http://cwe.mitre.org/data/index.html), you can
  # find this by looking at the alert output from your tests.
  # example: alertsToIgnore = [{cweid: "16", url: "http://localhost:9999/hello/\\w{3}/here"},
  # {cweid: "17", url: "http://localhost:9999/hello/\\w{3}/here"}]
  alertsToIgnore = []

  # Default list of scanners for which alerts will be shown in the report
  defaultScanners = [
    # PASSIVE SCANNERS
    "2"     #Private IP Disclosure
    "3"     #Session ID in URL Rewrite
    "10010" #Cookie No HttpOnly Flag
    "10011" #Cookie Without Secure Flag
    "10015" #Incomplete or No Cache-control and Pragma HTTP Header Set
    "10016" #Web Browser XSS Protection Not Enabled
    "10017" #Cross-Domain JavaScript Source File Inclusion
    "10019" #Content-Type Header Missing
    "10020" #X-Frame-Options Header Scanner
    "10021" #X-Content-Type-Options Header Missing
    "10023" #Information Disclosure - Debug Error Messages
    "10024" #Information Disclosure - Sensitive Informations in URL
    "10025" #Information Disclosure - Sensitive Information in HTTP Referrer Header
    "10026" #HTTP Parameter Override
    "10027" #Information Disclosure - Suspicious Comments
    "10032" #Viewstate Scanner
    "10105" #Weak Authentication Method
    "10202" #Absence of Anti-CSRF Tokens
    "10040" #Secure Pages Include Mixed Content
    "50001" #Script Passive Scan Rules
    "50003" #Stats Passive Scan Rule
    "90001" #Insecure JSF ViewState
    "90011" #Charset Mismatch
    "90022" #Application Error Disclosure

    # ACTIVE SCANNERS
    "0"     #Directory Browsing
    "6"     #Path Traversal
    "7"     #Remote File Inclusion
    "42"    #Source Code Disclosure - SVN
    "10045" #Source Code Disclosure - /WEB-INF folder
    "10048" #Remote Code Execution - Shell Shock
    "10095" #Backup File Disclosure
    "20012" #Anti CSRF Tokens Scanner
    "20014" #HTTP Parameter Pollution scanner
    "20015" #Heartbleed OpenSSL Vulnerability
    "20016" #Cross-Domain Misconfiguration
    "20017" #Source Code Disclosure - CVE-2012-1823
    "20018" #Remote Code Execution - CVE-2012-1823
    "20019" #External Redirect
    "30001" #Buffer Overflow
    "30002" #Format String Error
    "30003" #Integer Overflow Error
    "40003" #CRLF Injection
    "40008" #Parameter Tampering
    "40009" #Server Side Include
    "40012" #Cross Site Scripting (Reflected)
    "40013" #Session Fixation
    "40014" #Cross Site Scripting (Persistent)
    "40016" #Cross Site Scripting (Persistent) - Prime
    "40017" #Cross Site Scripting (Persistent) - Spider
    "40018" #SQL Injection
    "40019" #SQL Injection - MySQL
    "40020" #SQL Injection - Hypersonic SQL
    "40021" #SQL Injection - Oracle
    "40022" #SQL Injection - PostgreSQL
    "40023" #Possible Username Enumeration
    "50000" #Script Active Scan Rules
    "90019" #Server Side Code Injection
    "90020" #Remote OS Command Injection
    "90021" #XPath Injection
    "90023" #XML External Entity Attack
    "90024" #Generic Padding Oracle
    "90025" #Expression Language Injection
    "90028" #Insecure HTTP Method
  ]

  customRiskConf = [
    {
      pluginId: "322420643", risk: "High"
    }
  ]

  # Any additonal scanners teams want to use in addition to the defaultScanners
  additionalScanners = []

  # Any scanners for which teams don't want to see alerts goes here
  ignoreScanners = []

  debug {
    # Checks if the testUrl configured above returns a 2xx or 3xx response and fails if it returns anything else
    healthCheck=true

    # When set to true the library deletes the run context and policy, and clears down all of the alerts generated during
    # execution of the scans
    tearDown = true

    # Set to true if you would like zap-automation to print it's config to the console
    printConfig=true

    # Timeout value for patience config in seconds. Test times out if spider or active scan does not finish within configured time.
    patienceConfigTimeout=600

    # Interval value for patience config in seconds. Spider and Active Scan status is checked at this interval until the scan is completed.
    patienceConfigInterval=2

    # Zap connection timeout in seconds. Zap will timeout if a response is not received within the configured duration.
    connectionTimeout=20
  }
}
